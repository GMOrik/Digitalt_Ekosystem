/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package boi;

import java.awt.Graphics;
import java.awt.Color;
import java.awt.GridBagLayout;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingWorker;

import javax.swing.JScrollPane;

/**
 *
 * @author 03erpeon
 */
public class Ekosystem extends javax.swing.JPanel { //något är ganska fel med diagrammet(?)

    public static final int origoX = 15;
    public static final int origoY = 100;
    private static int skala = 10;
    public static int skala() {return skala;}
    
    private static int sidaX = 50;
    public static int sidaX(){return sidaX;}
    private static int sidaY = 50;
    public static int sidaY(){return sidaY;}
    public static final int areal = sidaX*sidaY;
    
    private static int antalDagar = 100;
    private static int fördröjningstid = 50;
    
    public static final List<Livlista> listaÖverListor = new ArrayList<>();
    public static List<Mall> aktivaListmallar = new ArrayList<>();
        
    public Ekosystem() {
        initComponents();
        sidaX = Integer.valueOf(txfX.getText());
        sidaY = Integer.valueOf(txfY.getText());
        skala = 6;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnKör = new javax.swing.JButton();
        lblStorlek = new javax.swing.JLabel();
        txfX = new javax.swing.JTextField();
        lblBokstavenX = new javax.swing.JLabel();
        txfY = new javax.swing.JTextField();
        lblAntalDagar = new javax.swing.JLabel();
        txfAntalDagar = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        lblTid = new javax.swing.JLabel();
        txfTid = new javax.swing.JTextField();
        btnÅterställ = new javax.swing.JButton();
        btnSkapaLiv = new javax.swing.JButton();
        btnVisa = new javax.swing.JButton();
        btnDiagram = new javax.swing.JButton();
        btnImporteraMallar = new javax.swing.JButton();
        btnSparaData = new javax.swing.JButton();
        txfAxelskalning = new javax.swing.JTextField();
        lblAxelskalning = new javax.swing.JLabel();
        btnAvbryt = new javax.swing.JButton();

        btnKör.setText("Kör");
        btnKör.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKörActionPerformed(evt);
            }
        });

        lblStorlek.setText("Storlek:");

        txfX.setText("100");

        lblBokstavenX.setText("x");

        txfY.setText("100");

        lblAntalDagar.setText("Antal dagar:");

        txfAntalDagar.setText("50");

        lblTid.setText("Tid mellan händelser (ms):");

        txfTid.setText("0");

        btnÅterställ.setText("Återställ");
        btnÅterställ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnÅterställActionPerformed(evt);
            }
        });

        btnSkapaLiv.setText("Skapa liv");
        btnSkapaLiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSkapaLivActionPerformed(evt);
            }
        });

        btnVisa.setText("Visa liv");
        btnVisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisaActionPerformed(evt);
            }
        });

        btnDiagram.setText("Diagram");
        btnDiagram.setEnabled(false);
        btnDiagram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDiagramActionPerformed(evt);
            }
        });

        btnImporteraMallar.setText("Importera mallar");
        btnImporteraMallar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImporteraMallarActionPerformed(evt);
            }
        });

        btnSparaData.setText("Spara data");
        btnSparaData.setEnabled(false);
        btnSparaData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSparaDataActionPerformed(evt);
            }
        });

        txfAxelskalning.setText("0.5");

        lblAxelskalning.setText("Y-pixelbredd i diagram:");

        btnAvbryt.setText("Avbryt körning");
        btnAvbryt.setEnabled(false);
        btnAvbryt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvbrytActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnKör, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSkapaLiv)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnVisa))
                            .addComponent(btnImporteraMallar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnDiagram, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSparaData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStorlek)
                                .addGap(24, 24, 24)
                                .addComponent(txfX, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblAntalDagar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblBokstavenX)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txfAntalDagar, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(txfY, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTid)
                            .addComponent(lblAxelskalning))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txfAxelskalning, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(txfTid, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(btnAvbryt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnÅterställ, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 5, Short.MAX_VALUE))
                    .addComponent(jSeparator1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAvbryt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnSkapaLiv)
                                    .addComponent(btnVisa)
                                    .addComponent(btnDiagram)
                                    .addComponent(lblStorlek)
                                    .addComponent(txfX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnImporteraMallar)
                                    .addComponent(btnSparaData)
                                    .addComponent(lblAntalDagar)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblBokstavenX)
                                    .addComponent(txfY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTid)
                                    .addComponent(txfTid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txfAntalDagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txfAxelskalning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblAxelskalning)))
                            .addComponent(btnKör, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnÅterställ, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(712, 712, 712))
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g){
        super.paintComponent(g);
        
        //rita bakgrund i vit
        g.setColor(Color.WHITE);
        g.fillRect(origoX, origoY, sidaX*skala, sidaY*skala);
        
        //svart kant
        g.setColor(Color.BLACK);
        g.drawRect(origoX, origoY, sidaX*skala, sidaY*skala);
        
        //punkter för koordinaterna en individ kan ha
        for (int j = 0; j < sidaY; j++){
            if (skala <= 1) break;
            for (int i = 0; i<sidaX; i++){
                g.drawLine(origoX + i*skala, origoY + j*skala, origoX + i*skala, origoY + j*skala);
            }
        }
        
        if (dag != 0) {
            g.setColor(Color.RED);
            g.drawString(Integer.toString(dag), lblAntalDagar.getX() + lblAntalDagar.getWidth() + 5, lblAntalDagar.getY()+13);
        }
        
        if (listaÖverListor.isEmpty()) return;
        
        //går ej att använda nästlad for-sats direkt med listaöverlistor eftersom multithread
        List<Liv> totallista = new ArrayList<>();
        for (Livlista lista: listaÖverListor){
            totallista.addAll(lista.lista); 
        }
        
        for (Liv l: totallista){
            if (l == null) continue;
            if (l.ärDöd()) continue;
            l.rita(g, skala);
        }
        
    }
    
    private int dag = 0; //för att aktuell dag ska kunna ritas ut.
    
    private void btnKörActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKörActionPerformed

        if (aktivaListmallar.isEmpty()){
            JOptionPane.showMessageDialog(null, "Vänligen skapa liv i ekosystemet", "Inmatningsfel", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //inmatning från rutorna
        try {
            antalDagar = Integer.valueOf(txfAntalDagar.getText());
            fördröjningstid = Integer.valueOf(txfTid.getText());
            sidaX = Integer.valueOf(txfX.getText());
            sidaY = Integer.valueOf(txfY.getText());
            
            //skalaY = 1 --> yMax = 500
            //2 --> 250
            //3 --> 500/3 = 166
            //4 --> 125
            // --> yMax = 500/skala --> skala = 500/yMax
            //allt mellan 166 och 250 ska ha skala 2 --> skala = (int)(500/sidaY)
            
            //skalaX = (int)(850/sidaX)
            //skalar efter den av de två som är störst
            
            int skalaX = (int)(1000/sidaX);
            int skalaY = (int)(700/sidaY);
            if (skalaX > skalaY) skala = skalaY;
            else skala = skalaX;
            
            //om skala == 0? går ej att se allt längre (egentligen då skala <2 om vi är ärliga)
            
            if (antalDagar <= 0 || fördröjningstid < 0 || sidaX <= 0 || sidaY <= 0){
                JOptionPane.showMessageDialog(null, "Vänligen se över din inmatning", "Fel", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(null, "Vänligen se över din inmatning", "Fel", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //kanske metod enableAll/disableAll
        
        Producent.resetUpptagnaPlatser();
        Livlista.resetStaticID();
        listaÖverListor.clear();
        btnKör.setEnabled(false);
        btnDiagram.setEnabled(false);
        btnSparaData.setEnabled(false);
        btnImporteraMallar.setEnabled(false);
        btnSkapaLiv.setEnabled(false);
        btnVisa.setEnabled(false);
        btnAvbryt.setEnabled(true);
        
        txfAntalDagar.setEnabled(false);
        txfTid.setEnabled(false);
        txfX.setEnabled(false);
        txfY.setEnabled(false);
        dag = 0;
        
        for (Mall m: aktivaListmallar){
            Livlista list = m.skapaLista();
            listaÖverListor.add(list);
        }
        
        
        
        new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    for (int i = 0; i < antalDagar; i++) {
                        skrivUtdata(listaÖverListor);
                        List<Liv> totalLista = new ArrayList<>();
                        for (Livlista l: listaÖverListor){
                            totalLista.addAll(l.lista);
                        }
                        Collections.shuffle(totalLista);
                        
                        for (Liv a : totalLista) { 
                            if (a.ärDöd()) continue; 
                            if (a instanceof Konsument){
                                Konsument o = (Konsument)(a);
                                o.flytta(totalLista);
                            }
                            else if (a instanceof Producent){ 
                                Producent o = (Producent)a; 
                                o.väx();
                            }
                            
                            repaint();
                            try {Thread.sleep(fördröjningstid);
                            } catch (InterruptedException ex) {}
                        }
                        dag++;
                    }
                    btnKör.setEnabled(true);
                    btnSkapaLiv.setEnabled(true);
                    btnDiagram.setEnabled(true);
                    btnSparaData.setEnabled(true);
                    btnVisa.setEnabled(true);
                    btnImporteraMallar.setEnabled(true);
                    
                    txfAntalDagar.setEnabled(true);
                    txfTid.setEnabled(true);
                    txfX.setEnabled(true);
                    txfY.setEnabled(true);
                    btnAvbryt.setEnabled(false);
                    dag = 0;
                    
                    for (Livlista l: listaÖverListor){ //ev. namn först. Också gärna i en textarea eller något.
                        if (l.mall.heltalsvariabler[0] > 0){
                            System.out.println("Rovdjur \n" + l.dödsandel() + "\n");
                        }
                        if (l.mall.heltalsvariabler[0] == 0){
                            System.out.println("Växtätare \n" + l.dödsandel() + "\n");
                        }
                    }
                    
                    return null;
                }
            }.execute();
    }//GEN-LAST:event_btnKörActionPerformed
   
    private static void skrivUtdata(List<Livlista> listaÖverListor){
        for (Livlista l: listaÖverListor){
            l.sparaAktuellData();
        }
    }
    
    private void btnÅterställActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnÅterställActionPerformed
        Object[] options = {"Ja","Nej"};
        int val = JOptionPane.showOptionDialog(null, "Är du säker på att du vill återställa simuleringen? Osparad data kommer att gå förlorad", "Återställ simulering", JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE, null, options, "Nej");
        if (val == JOptionPane.NO_OPTION) return;
        
        listaÖverListor.clear();
        aktivaListmallar.clear();
        Livlista.resetStaticID(); //egentligen inte nödvändig här, finns i btnkör
        btnKör.setEnabled(true);
        btnSkapaLiv.setEnabled(true);
        btnDiagram.setEnabled(false);
        btnSparaData.setEnabled(false);
        btnImporteraMallar.setEnabled(true);
        btnVisa.setEnabled(true);
        Producent.resetUpptagnaPlatser();
        
        txfAntalDagar.setEnabled(true);
        txfTid.setEnabled(true);
        txfX.setEnabled(true);
        txfY.setEnabled(true);
        dag = 0;
    }//GEN-LAST:event_btnÅterställActionPerformed

    private void btnSkapaLivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSkapaLivActionPerformed
        Mall.skapelseFönstret();
        if (aktivaListmallar.size() > 0){
            btnKör.setEnabled(true);
            //btnÅterställ.setEnabled(true);
        }
    }//GEN-LAST:event_btnSkapaLivActionPerformed

    private void btnVisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisaActionPerformed
        Mall.visaListor(aktivaListmallar);
    }//GEN-LAST:event_btnVisaActionPerformed

    private void btnDiagramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiagramActionPerformed
        //egen klass för diagramritning?
        if (listaÖverListor.isEmpty()){
            return;
        }
        JDialog d = new JDialog(new JFrame(), "Populationsdiagram");
        JPanel p = new JPanel(){
            public void paintComponent(Graphics g){
                super.paintComponent(g);
                int max = -1;
                for (Livlista b: listaÖverListor){
                    if (b.mall.sort == Sort.PRODUCENT) continue; //att ha det gröna strecket är inte särskilt intressant, dock annorlunda nu med ny definition
                    if (b.störstaPopulation() > max) max = b.störstaPopulation();
                }
                
                int pixelbreddX = 1;
                //går att skala ned x-axeln om man hoppar över typ vart fjärde värde eller liknande
                
                double pixelbreddY;
                try{
                    pixelbreddY = Double.valueOf(txfAxelskalning.getText());
                    if (pixelbreddY <= 0){
                        JOptionPane.showMessageDialog(null, "Pixelbredden måste vara > 0", "Fel", JOptionPane.WARNING_MESSAGE);
                    }
                }
                catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(null, "Vänligen ange en pixelbredd som decimaltal","Fel", JOptionPane.WARNING_MESSAGE);
                    return;
                }
        
                int marginal = 30;
        
                int xAxelLängd = listaÖverListor.get(0).antalÅr(); //alla listor kommer att ha samma size()
                int yAxelLängd = max;
                int modXAxelLängd = xAxelLängd * pixelbreddX;
                int modYAxelLängd = (int) (yAxelLängd * pixelbreddY);
                int origoX = 50; 
                int origoY = 50 + modYAxelLängd;
        
                //rita svart bakgrund
                g.setColor(Color.BLACK);
                g.fillRect(origoX-marginal, origoY - modYAxelLängd-marginal, modXAxelLängd+2*marginal, modYAxelLängd+2*marginal);
        
                //notera att x-axeln ofta kan hamna utanför botten
                //rita koordinataxlar
                g.setColor(Color.ORANGE);
                g.drawLine(origoX, origoY, (origoX+modXAxelLängd), origoY); //xAxel
                g.drawLine(origoX, origoY, origoX, (origoY-modYAxelLängd)); //yAxel
        
                //markeringar i axlarna som visar skalan
                final int stegstorlek = 100;
                int steg = (int) (stegstorlek*pixelbreddY);
        
                //y-axel
                for (int i = 0; i<(int)(yAxelLängd/stegstorlek); i++){
                    //streck i y-axeln
                    g.drawLine(origoX-5, origoY-steg, origoX+5, origoY-steg);
            
                    //siffra i y-axeln
                    g.drawString(steg/pixelbreddY + "", origoX-30, origoY-steg+5);
                    steg += stegstorlek*pixelbreddY;
                }
        
                //x-axel
                steg = stegstorlek*pixelbreddX;
                for (int i = 0; i<(int)(xAxelLängd/stegstorlek); i++){
                    //streck i x-axeln
                    g.drawLine(origoX+steg, origoY-5, origoX+steg, origoY+5);
            
                    //siffra i x-axeln
                    g.drawString(steg/pixelbreddX + "", origoX+steg-5, origoY+25);
            
                    steg += stegstorlek*pixelbreddX;
                }
        
                for (Livlista b: listaÖverListor){
                    if (b.mall.sort == Sort.PRODUCENT) continue; //ointressant att se producentstrecket
                    //g.setColor(b.mall.sort.färg());
                    switch(b.hämtaMall().heltalsvariabler[0]){ //väljer färg efter plats i näringskedjan
                        case -1:
                            g.setColor(Color.GREEN); //samma som i paint() för individer
                            break;
                        case 0: 
                            g.setColor(Color.CYAN);
                            break;
                        case 1:
                            g.setColor(Color.RED);
                            break;
                        case 2:
                            g.setColor(Color.decode("#FF55FF")); //lila
                            break;
                        case 3:
                            g.setColor(Color.decode("#FFFF55")); //gul
                            break;
                        default:
                            g.setColor(Color.white); //höga konsumenter
                    }
                    for (int i = 0; i<xAxelLängd; i++){
                        //+1 på satsen nedan egentligen bara då pixelbredd<1
                        g.fillRect((int)(origoX + i*pixelbreddX), (int)(origoY - b.hämtaPopulation(i)*pixelbreddY-pixelbreddY), pixelbreddX, (int)(pixelbreddY+0.99));
                    }
                }
                    }
                };
        p.setLayout(new GridBagLayout());
        
        //fungerar ej
        JScrollPane scrollPane = new JScrollPane(p);
        //scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        
        d.add(p);
        //går att ha storleken på fönstret som variabler anpassade efter diagrammets storlek
        //måste dock fortfarande skalas
        d.setSize(1000, 1000);
        d.setModal(true);
        d.setLocationRelativeTo(null);
        d.setVisible(true);
        
        String s = "";
        for (Livlista l: listaÖverListor){ //ev. namn först. Också gärna i en textarea eller något.
            if (l.mall.heltalsvariabler[0] > 0){
                s += (l.mall.namn + "\nRovdjur \n" + l.dödsandel() + "\nPopulationsstorlek sista dagen: " + l.sistaPopulation() + "\n\n");
            }
            if (l.mall.heltalsvariabler[0] == 0){
                s += (l.mall.namn + "\nVäxtätare \n" + l.dödsandel() + "\nPopulationsstorlek sista dagen: " + l.sistaPopulation() + "\n\n");
            }
        }
        JOptionPane.showMessageDialog(null, s, "Dödsorsaker", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnDiagramActionPerformed

    static File latestDir = null; //notera att det inte är samma fil som i mall --> man kanske vill hämta från ett ställe och spara till ett annat
    
    private void btnImporteraMallarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImporteraMallarActionPerformed
        JFileChooser filechooser = new JFileChooser();
        filechooser.setDialogTitle("Hämta lista");
        if (latestDir != null) filechooser.setCurrentDirectory(latestDir.getParentFile());
        if (filechooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            File file = filechooser.getSelectedFile();
            latestDir = file;
            try {
                Reader in = new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8);
                int bufferSize = 1024;
                char[] buffer = new char[bufferSize];
                StringBuilder out = new StringBuilder();
                for (int numRead; (numRead = in.read(buffer, 0, buffer.length)) > 0; ) {
                    out.append(buffer, 0, numRead);
                }
                in.close();
                String allt = out.toString();
                Mall m = Mall.importeraMall(allt);
                if(m == null){
                    JOptionPane.showMessageDialog(null, "Vänligen ange en giltig fil", "Fel", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                aktivaListmallar.add(m);
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Ekosystem.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Ekosystem.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnImporteraMallarActionPerformed

    private void btnSparaDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSparaDataActionPerformed
        for (int i = 0; i<listaÖverListor.size(); i++){
            Livlista l = listaÖverListor.get(i);
            l.sparaStatistik();
        }
    }//GEN-LAST:event_btnSparaDataActionPerformed

    private void btnAvbrytActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvbrytActionPerformed
        btnAvbryt.setEnabled(false);
        btnKör.setEnabled(true);
        btnSkapaLiv.setEnabled(true);
        btnDiagram.setEnabled(true);
        btnSparaData.setEnabled(true);
        btnVisa.setEnabled(true);
        btnImporteraMallar.setEnabled(true);
                    
        txfAntalDagar.setEnabled(true);
        txfTid.setEnabled(true);
        txfX.setEnabled(true);
        txfY.setEnabled(true);
        btnAvbryt.setEnabled(false);
        dag = 0;
        
        listaÖverListor.clear();
        Livlista.resetStaticID(); //egentligen inte nödvändig här, finns i btnkör
        Producent.resetUpptagnaPlatser();
    }//GEN-LAST:event_btnAvbrytActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAvbryt;
    private javax.swing.JButton btnDiagram;
    private javax.swing.JButton btnImporteraMallar;
    private javax.swing.JButton btnKör;
    private javax.swing.JButton btnSkapaLiv;
    private javax.swing.JButton btnSparaData;
    private javax.swing.JButton btnVisa;
    private javax.swing.JButton btnÅterställ;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAntalDagar;
    private javax.swing.JLabel lblAxelskalning;
    private javax.swing.JLabel lblBokstavenX;
    private javax.swing.JLabel lblStorlek;
    private javax.swing.JLabel lblTid;
    private javax.swing.JTextField txfAntalDagar;
    private javax.swing.JTextField txfAxelskalning;
    private javax.swing.JTextField txfTid;
    private javax.swing.JTextField txfX;
    private javax.swing.JTextField txfY;
    // End of variables declaration//GEN-END:variables
}
